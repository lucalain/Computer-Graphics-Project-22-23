#version 450#extension GL_ARB_separate_shader_objects : enablelayout(location = 0) in vec3 fragPos;layout(location = 1) in vec3 fragNorm;layout(location = 2) in vec2 fragUV;layout(location = 0) out vec4 outColor;layout(set= 0,binding = 2) uniform sampler2D tex;layout(binding = 1) uniform GlobalUniformBufferObject {    vec3 lightPos;    vec3 lightDir;    vec4 lightColor;    vec3 eyePos;} gubo;const float beta = 1.0f;const float g = 1.5;const float cosout = 0.85;const float cosin  = 0.95;void main() {    //SPOT LIGHT    vec3 Norm = normalize(fragNorm);    vec3 EyeDir = normalize(gubo.eyePos - fragPos);    vec3 lightDir = normalize(gubo.lightPos - fragPos);    vec3 spotDir = gubo.lightDir;    vec3 lightColor =  gubo.lightColor.rgb *                       pow((g/float((gubo.lightPos - fragPos)/lightDir)),beta) *                clamp((dot(lightDir,spotDir)-cosout)/(cosin-cosout),0.0,1.0);    vec3 Diffuse = texture(tex, fragUV).rgb * 0.995f * clamp(dot(Norm, lightDir),0.0,1.0);    vec3 Ambient = texture(tex, fragUV).rgb * 0.005f;    outColor = vec4(clamp((Diffuse) * lightColor.rgb   + Ambient,0.0,1.0), 1.0f);          }