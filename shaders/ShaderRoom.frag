#version 450#extension GL_ARB_separate_shader_objects : enablelayout(location = 0)in vec3 fragPos;layout(location = 1) in vec3 fragNorm;layout(location = 2) in vec2 fragUV;layout(location = 0) out vec4 outColor;layout(set = 0, binding = 2) uniform sampler2D tex;layout(binding = 1) uniform GlobalUniformBufferObjectR {    vec3 lightPos;    vec4 lightColor;    vec3 eyePos;}gubo;const float beta = 2.0f;const float g = 4.5f;void main() {    vec3 Norm = normalize(fragNorm);    vec3 lightDir = normalize(gubo.lightPos - fragPos);    vec3 lightColor = gubo.lightColor.rgb;    vec3 EyeDir = normalize(gubo.eyePos - fragPos);    vec3 Diffuse = texture(tex, fragUV).rgb * 0.99f * clamp(dot(Norm, lightDir),0.0,1.0);    vec3 Ambient = texture(tex, fragUV).rgb * 0.01f;    outColor = vec4(clamp(pow(float(g/((gubo.lightPos - fragPos)/lightDir)),beta) *                          (Diffuse) * lightColor + Ambient,0.0,1.0), 1.0f);}